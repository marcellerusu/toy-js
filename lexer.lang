export dataclass Id(line: num, name)
export dataclass Num(line: num, value: str, is_negative: bool)
export dataclass Command(line: num, name: str)
export dataclass Str(line: num, value: str)
export dataclass Regex(line: num, value: str)
export dataclass JsOp(line: num, op: str)
export dataclass Let(line: num)
export dataclass Eq(line: num)
export dataclass PlusEq(line: num)
export dataclass OpenParen(line: num)
export dataclass CloseParen(line: num)
export dataclass Comma(line: num)
export dataclass Def(line: num)
export dataclass End(line: num)
export dataclass Return(line: num)
export dataclass DataClass(line: num)
export dataclass New(line: num)
export dataclass Dot(line: num)
export dataclass Class(line: num)
export dataclass Get(line: num)
export dataclass Bang(line: num)
export dataclass OpenSquare(line: num)
export dataclass CloseSquare(line: num)
export dataclass If(line: num)
export dataclass Else(line: num)
export dataclass Or(line: num)
export dataclass And(line: num)
export dataclass TripleEq(line: num)
export dataclass NotTripleEq(line: num)
export dataclass While(line: num)
export dataclass Break(line: num)
export dataclass Continue(line: num)
export dataclass Do(line: num)
export dataclass Export(line: num)
export dataclass Default(line: num)
export dataclass Spread(line: num)
export dataclass Arrow(line: num)
export dataclass Bind(line: num)
export dataclass Is(line: num)
export dataclass Not(line: num)
export dataclass For(line: num)
export dataclass Of(line: num)
export dataclass OpenBrace(line: num)
export dataclass CloseBrace(line: num)
export dataclass Colon(line: num)
export dataclass Import(line: num)
export dataclass From(line: num)

class Lexer(str)
  index = 0
  get rest_of_string = .str.slice(.index)
  get cur = .str[.index]

  matched = null
  def scan(regex)
    let result = .rest_of_string.match(regex)
    return false if !result || result.index !== 0
    .index += result[0].length
    .matched = result[0]
    return true
  end

  def parse_str
    let str = ""
    .index += 1
    while
      .cur !== "\"" ||
      (.str[.index - 1] === "\\" && .str[.index - 2] !== "\\")
    do
      str += .cur
      .index += 1
      assert_not_reached! "no new lines" if .cur === "\n"
    end
    .index += 1
    return str
  end

  def tokenize
    let tokens = []
    let line = 0
    while .index < .str.length do
      if .scan(/\n/)
        line += 1
        continue
      else if .scan(/\s+/)
        continue
      else if .scan(/#.*/)
        continue
      else if .scan(/let\b/)
        tokens.push(new Let(line))
      else if .scan(/while\b/)
        tokens.push(new While(line))
      else if .scan(/export\b/)
        tokens.push(new Export(line))
      else if .scan(/import\b/)
        tokens.push(new Import(line))
      else if .scan(/from\b/)
        tokens.push(new From(line))
      else if .scan(/default\b/)
        tokens.push(new Default(line))
      else if .scan(/do\b/)
        tokens.push(new Do(line))
      else if .scan(/for\b/)
        tokens.push(new For(line))
      else if .scan(/of\b/)
        tokens.push(new Of(line))
      else if .scan(/\/.*\//)
        tokens.push(new Regex(line, .matched))
      else if .scan(/continue\b/)
        tokens.push(new Continue(line))
      else if .scan(/break\b/)
        tokens.push(new Break(line))
      else if .scan(/def\b/)
        tokens.push(new Def(line))
      else if .scan(/if\b/)
        tokens.push(new If(line))
      else if .scan(/else\b/)
        tokens.push(new Else(line))
      else if .scan(/end\b/)
        tokens.push(new End(line))
      else if .scan(/return\b/)
        tokens.push(new Return(line))
      else if .scan(/dataclass\b/)
        tokens.push(new DataClass(line))
      else if .cur === "\""
        let parsed_str = .parse_str()
        tokens.push(new Str(line, parsed_str))
      else if .scan(/class\b/)
        tokens.push(new Class(line))
      else if .scan(/get\b/)
        tokens.push(new Get(line))
      else if .scan(/new\b/)
        tokens.push(new New(line))
      else if .scan(/is\b/)
        tokens.push(new Is(line))
      else if .scan(/not\b/)
        tokens.push(new Not(line))
      else if .scan(/\.\.\./)
        tokens.push(new Spread(line))
      else if .scan(/\./)
        tokens.push(new Dot(line))
      else if .scan(/\(/)
        tokens.push(new OpenParen(line))
      else if .scan(/\)/)
        tokens.push(new CloseParen(line))
      else if .scan(/\[/)
        tokens.push(new OpenSquare(line))
      else if .scan(/\]/)
        tokens.push(new CloseSquare(line))
      else if .scan(/\{/)
        tokens.push(new OpenBrace(line))
      else if .scan(/\}/)
        tokens.push(new CloseBrace(line))
      else if .scan(/,/)
        tokens.push(new Comma(line))
      else if .scan(/[a-zA-Z_]+\!/)
        tokens.push(new Command(line, .matched))
      else if .scan(/[a-zA-Z_][a-zA-Z_0-9]*/)
        tokens.push(new Id(line, .matched))
      else if .scan(/\+=/)
        tokens.push(new PlusEq(line))
      else if .scan(/[0-9]+/)
        tokens.push(new Num(line, Number(.matched)))
      else if .scan(/-[0-9]+/)
        tokens.push(new Num(line, Number(.matched), true))
      else if .scan(/\+\+/)
        tokens.push(new JsOp(line, "++"))
      else if .scan(/\>=|\<=|[\+\-\*\/\%\<\>]|&&|\|\||===|!==/)
        tokens.push(new JsOp(line, .matched))
      else if .scan(/=>/)
        tokens.push(new Arrow(line))
      else if .scan(/::/)
        tokens.push(new Bind(line))
      else if .scan(/:/)
        tokens.push(new Colon(line))
      else if .scan(/=/)
        tokens.push(new Eq(line))
      else if .scan(/\!/)
        tokens.push(new Bang(line))
      else
        assert_not_reached! "nothing found"
      end
    end
    return tokens
  end
end


export default Lexer